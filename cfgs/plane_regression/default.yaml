# Dataset Related
num_points: 1024  # number of poins actually used in training and evaluation
dataset:
  common:
    NAME: PlaneRegression
    data_dir:  '/media/brans/data/datasets/toy/' #'/media/brans/data/datasets/plane_regression'
  train:
    split: train
    num_points: 1024  # in training, use sampled 1024 points for data augmentation.
  val:
    split: test
    num_points: 1024  # in testing, use uniformly pre-sampled 1024 points for evaluation (following https://github.com/lulutang0608/Point-BERT)

feature_keys: pos

datatransforms:
  #train: [PointsToTensor, PointCloudScaleAndTranslate]  # rotation does not help
  train: [PointsToTensor]
  #vote: [PointCloudScaleAndTranslate]
  vote: []
  val: [PointsToTensor]
  kwargs:
    shift: [0.2, 0.2, 0.2]
batch_size: 32
dataloader:
  num_workers: 6 #6

#um_classes: 40
# ---------------------------------------------------------------------------- #
# Training cfgs
# ---------------------------------------------------------------------------- #
# training receipe borrowed from: https://github.com/yanx27/Pointnet_Pointnet2_pytorch

# ---------------------------------------------------------------------------- #
# Training cfgs
# ---------------------------------------------------------------------------- #
# this one is better.
sched: cosine
epochs: 600
warmup_epochs: 0
min_lr: null

# Training parameters
lr: 0.001
optimizer:
 NAME: 'adamw'
 weight_decay: 0.05

grad_norm_clip: 1

criterion_args:
  NAME: HomogeneousGeodesicLoss
  alpha: 0.33
  eps: 1e-7

# ---------------------------------------------------------------------------- #
# io and misc
# ---------------------------------------------------------------------------- #
log_dir: 'plane_regression'
print_freq: 10
val_freq: 1
#save_freq: 10

# ----------------- Model related
val_batch_size: 64
pretrained_path: null

wandb:
  project: PointNeXt-PlaneRegression

seed: null

#----------------- Visualization of predictions
vis_cnt_start: 10 # Number of meshes to visualize on start
vis_cnt: 10 # Number of meshes to visualize on each percentile